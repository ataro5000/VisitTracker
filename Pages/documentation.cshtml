@page
@{
    ViewData["Title"] = "Documentation - Visit Tracker";
}
<div class="body-doc">
    <h1>Documentation for Learning Manager</h1>
    <section class="documentation-section" id="description">
        <h2 class="documentation-header">1. Description</h2>
        <p class="doc-p"><b>Visit Tracker</b> is a web-based application designed to help users monitor and manage
            visits or attendance records efficiently. Regular users can view and track their own visit history.</p>
        <p class="doc-p">Key features include:</p>
        <ul>
            <li>Personalized dashboards for tracking visit history</li>
            <li>Responsive design for accessibility on all devices</li>

        </ul>
        <p class="doc-p"></p>
    </section>

    <section class="documentation-section" id="Analysis-And-Design">
        <h2 class="documentation-header">2. Analysis and Design</h2>

        <h3 class="documentation-subheader">2.1 Requirements Analysis</h3>
        <p class="doc-p">The Visit Tracker application must fulfill the following requirements:</p>
        <ul>
            <li>Track the number of times a client computer has visited the page using a persistent cookie.</li>
            <li>Display the client computer's IP address on the page.</li>
            <li>Display the client computer's time zone on the page.</li>
            <li>Ensure the visit count persists across browser sessions (until the cookie expires or is cleared).</li>
            <li>Provide a simple, user-friendly interface for displaying visit information.</li>
        </ul>

        <h3 class="documentation-subheader">2.2 Architectural Design</h3>
        <ul>
            <li><strong>Frontend:</strong> ASP.NET Razor Pages for rendering the UI and displaying visit information.
            </li>
            <li><strong>Backend:</strong> C# code-behind handles cookie management and retrieves the client's IP
                address.</li>
            <li><strong>Time Zone Detection:</strong> JavaScript is used to detect the client's time zone and display it
                on the page, since server-side code cannot reliably determine the client's local time zone.</li>
            <li><strong>Persistence:</strong> The visit count is stored in a persistent HTTP cookie with an appropriate
                expiration date.</li>
        </ul>

        <h3 class="documentation-subheader">2.3 Workflow Design</h3>
        <ol>
            <li>On each page load, the server checks for the existence of a visit count cookie.</li>
            <li>If the cookie exists, increment the count; if not, create it with a count of 1.</li>
            <li>The server retrieves the client's IP address from the request.</li>
            <li>The page loads and displays the visit count and IP address.</li>
            <li>Client-side JavaScript detects the users time zone and updates the page accordingly.</li>
        </ol>

        <h3 class="documentation-subheader">2.4 Security Design</h3>
        <ul>
            <li>Cookies are set with appropriate expiration and marked as HttpOnly where possible to reduce XSS risk.
            </li>
            <li>No sensitive personal data is stored or transmitted.</li>
            <li>IP address is displayed for informational purposes only and not stored.</li>
            <li>JavaScript is used only for time zone detection and does not transmit data to the server.</li>
        </ul>
    </section>

    <section class="documentation-section" id="Implementation">
        <h2 class="documentation-header">3. Implementation</h2>

        <h3 class="documentation-subheader">3.1 Key Features Implementation</h3>
        <ul>
            <li><strong>Persistent Visit Counter:</strong> On each page load, the server checks for a cookie that tracks
                the number of visits. If present, the count is incremented; if not, the cookie is created and set to 1.
                The cookie is configured with an expiration date to persist across sessions.</li>
            <li><strong>IP Address Display:</strong> The server retrieves the client's IP address from the HTTP request
                and displays it on the page.</li>
            <li><strong>Time Zone Detection:</strong> JavaScript on the client side detects the user's local time zone
                using the browsers API and updates the page dynamically. This information is not sent to the server.
            </li>
            <li><strong>User Interface:</strong> The application uses Razor Pages to render a simple, responsive UI that
                displays the visit count, IP address, and time zone information.</li>
        </ul>

        <h3 class="documentation-subheader">3.2 File Structure & Responsibilities</h3>
        <table class="doc-file-table">
            <tr>
                <th>File</th>
                <th>Location</th>
                <th>Responsibilities</th>
            </tr>
            <tr>
                <td>Index.cshtml</td>
                <td>Pages/</td>
                <td>Main page displaying visit count, IP address, and time zone.</td>
            </tr>
            <tr>
                <td>Index.cshtml.cs</td>
                <td>Pages/</td>
                <td>C# code-behind for handling cookies and retrieving IP address.</td>
            </tr>
            <tr>
                <td>_Layout.cshtml</td>
                <td>Pages/Shared/</td>
                <td>Site-wide layout and navigation.</td>
            </tr>
            <tr>
                <td>site.js</td>
                <td>wwwroot/js/</td>
                <td>JavaScript for detecting and displaying the client's time zone.</td>
            </tr>
            <tr>
                <td>site.css</td>
                <td>wwwroot/css/</td>
                <td>Styling for responsive and accessible UI.</td>
            </tr>
        </table>

        <h3 class="documentation-subheader">3.3 Notable Implementation Details</h3>
        <ul>
            <li>Cookies are set with an expiration of 30 days to ensure persistence across browser sessions.</li>
            <li>The visit count is incremented server-side to prevent tampering.</li>
            <li>IP address is obtained from the request context, accounting for proxy headers if present.</li>
            <li>Time zone is detected using <code>Intl.DateTimeFormat().resolvedOptions().timeZone</code> in JavaScript
                and displayed without server interaction.</li>
            <li>No sensitive or personally identifiable information is stored or transmitted.</li>
        </ul>
    </section>

    <section class="documentation-section" id="UserGuide">
        <h2 class="documentation-header">4. User Guide</h2>

        <h3 class="documentation-subheader">4.1 Getting Started</h3>
        <ol>
            <li>Open the Visit Tracker web application in your browser.</li>
            <li>Each time you visit or refresh the page, your visit count will be updated and displayed.</li>
            <li>Your current IP address and time zone will also be shown on the page.</li>
        </ol>

        <h3 class="documentation-subheader">4.2 Features Overview</h3>
        <ul>
            <li><strong>Visit Count:</strong> The number of times you have accessed the page from your browser is shown
                at the top of the main page.</li>
            <li><strong>IP Address:</strong> Your current public IP address is displayed for your reference.</li>
            <li><strong>Time Zone:</strong> Your local time zone is detected automatically and shown on the page.</li>
        </ul>

        <h3 class="documentation-subheader">4.3 Notes for Users</h3>
        <ul>
            <li>If you clear your browser cookies, your visit count will reset.</li>
            <li>The visit count is tracked per browser and device.</li>
            <li>No login or registration is required to use the Visit Tracker.</li>
            <li>Your IP address and time zone are only displayed to you and are not stored by the application.</li>
        </ul>
    </section>

    <section class="documentation-section" id="Links">
        <h2 class="documentation-header">5. Links</h2>
        <p class="doc-p">5.1 FreeCodeCamp: Responsive Web Design. <a
                href="https://www.freecodecamp.org/learn/2022/responsive-web-design/">FreeCodeCamp Responsive Web
                Design</a></p>
        <p class="doc-p">5.2 W3Schools is a great reference for all things web development. <a
                href="https://www.w3schools.com/">W3Schools</a></p>
        <p class="doc-p">5.3 Use this tool to validate your HTML files. <a href="https://validator.w3.org/">W3
                Validator</a></p>
        <p class="doc-p">5.4 Great reference for all things PHP. <a href="https://www.phptutorial.net/">PHP Tutorial</a>
        </p>
        <p class="doc-p">5.5 Microsoft ASP.NET Core documentation and tutorials. <a
                href="https://learn.microsoft.com/en-us/aspnet/core/?view=aspnetcore-8.0">ASP.NET Core Docs</a></p>
        <p class="doc-p">5.6 Microsoft C# documentation and tutorials. <a
                href="https://learn.microsoft.com/en-us/dotnet/csharp/">C# Docs</a></p>
        <p class="doc-p">5.7 Razor Pages official documentation. <a
                href="https://learn.microsoft.com/en-us/aspnet/core/razor-pages/?view=aspnetcore-8.0">Razor Pages
                Docs</a></p>
        <p class="doc-p">5.8 Mozilla Developer Network (MDN) JavaScript Reference. <a
                href="https://developer.mozilla.org/en-US/docs/Web/JavaScript">MDN JavaScript</a></p>

    </section>

    <section class="documentation-section" id="Notes">
        <h2 class="documentation-header">6. Notes</h2>

        <h3 class="documentation-subheader">6.1 General Notes/Lessons Learned</h3>
        <h4>6.1.1 Development Process Insights</h4>
        <ol>
            <li><strong>Time Zone Detection Challenge</strong>:
                <ul>
                    <li> When I first tried to display the user's time zone, I spent a lot of time trying to do it in
                        C#. I eventually realized that the server only knows its own time zone, so I had to switch to
                        JavaScript. It was a bit frustrating, but now I understand why client-side detection is
                        necessary.
                    </li>
                </ul>
            </li>
            <li><strong>IP Address Retrieval Confusion</strong>:
                <ul>
                    <li>When testing locally, the IP address always showed as 127.0.0.1 or ::1, which made me think the
                        code
                        was broken.</li>
                    <li><em>Lesson Learned:</em> Localhost testing will always show the loopback address; real IPs only
                        appear in a deployed environment.</li>
                </ul>
            </li>
            <li><strong>Cookies Persistence</strong>:
                <ul>
                    <li>I noticed that my visit count kept resetting every time I closed my browser. After some
                        research, I realized I forgot to set an expiration date on the cookie. Once I added that, the
                        count persisted as expected.
                    </li>
                </ul>
            </li>
            <li><strong>Browser Differences</strong>:
                <ul>
                    <li> I tried the app in a different browser and noticed the visit count was different. That's when I
                        realized cookies are stored per browser and device, which actually makes sense for this project.
                    </li>
                </ul>
            </li>
            <li><strong>Debugging JavaScript</strong>:
                <ul>
                    <li>Forgot to include the JavaScript file at first, so the time zone never appeared.</li>
                    <li><em>Lesson Learned:</em> Double-check script references and use browser developer tools for
                        debugging.</li>
                </ul>
            </li>
            <li><strong>Documentation Importance</strong>:
                <ul>
                    <li>Writing this documentation helped me realize where my explanations were unclear or incomplete.
                    </li>
                    <li><em>Lesson Learned:</em> Good documentation is as important as working code, especially for
                        future reference or sharing with others. Comment, Comment comment comm...</li>
                </ul>
            </li>
        </ol>
    </section>
</div>